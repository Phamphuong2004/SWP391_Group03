import React, { useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import provinces from "../Provinces";
import ADNTestingServices from "../listOfServices";
import "./Booking.css";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";

const genders = ["Nam", "N·ªØ", "Kh√°c"];
const testPurposes = ["D√¢n s·ª±", "H√†nh ch√≠nh"];

const testCategories = [
  "X√©t nghi·ªám huy·∫øt th·ªëng cha con",
  "X√©t nghi·ªám huy·∫øt th·ªëng m·∫π con",
  "X√©t nghi·ªám ADN h√†nh ch√≠nh",
  "X√©t nghi·ªám ADN c√° nh√¢n",
  "X√©t nghi·ªám ADN ph√°p l√Ω",
  "X√©t nghi·ªám ADN tr∆∞·ªõc sinh",
  "X√©t nghi·ªám ADN kh√°c",
];

const serviceTypes = [
  "T∆∞ v·∫•n di truy·ªÅn",
  "L·∫•y m·∫´u t·∫°i nh√†",
  "L·∫•y m·∫´u t·∫°i c∆° s·ªü",
  "Giao k·∫øt qu·∫£ t·∫≠n n∆°i",
  "D·ªãch v·ª• nhanh",
  "D·ªãch v·ª• ti√™u chu·∫©n",
];

function Booking() {
  const [form, setForm] = useState({
    fullName: "",
    dob: "",
    phone: "",
    email: "",
    gender: "",
    testPurpose: "",
    serviceType: "",
    appointmentDate: "",
    collectionTime: "",
    fingerprintFile: "",
    district: "",
    province: "",
    testCategory: "",
  });

  const [districts, setDistricts] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "province") {
      const selected = provinces.find((p) => p.name === value);
      setDistricts(selected ? selected.districts : []);
      setForm((prev) => ({ ...prev, province: value, district: "" }));
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setForm((prev) => ({ ...prev, fingerprintFile: file.name }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      let collectionTimeStr = form.collectionTime;
      if (collectionTimeStr && collectionTimeStr.length === 5) {
        collectionTimeStr = collectionTimeStr + ":00";
      }
      const data = {
        ...form,
        collectionTime: collectionTimeStr,
      };
      await axios.post("/api/create-appointment", data);
      toast.success("ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng!");
      navigate("/booking-notification");
    } catch (err) {
      toast.error("ƒê·∫∑t l·ªãch h·∫πn th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="booking-page">
      <form className="booking-form" onSubmit={handleSubmit}>
        <h2 className="booking-title">ƒê·∫∑t l·ªãch h·∫πn x√©t nghi·ªám ADN</h2>
        <div className="booking-row">
          <div className="booking-col">
            <label>
              H·ªç v√† t√™n
              <input
                type="text"
                name="fullName"
                value={form.fullName}
                onChange={handleChange}
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                required
              />
            </label>
            <label>
              Ng√†y sinh
              <div style={{ position: "relative" }}>
                <DatePicker
                  selected={form.dob ? new Date(form.dob) : null}
                  onChange={(date) => {
                    setForm((prev) => ({
                      ...prev,
                      dob: date ? date.toISOString().slice(0, 10) : "",
                    }));
                  }}
                  dateFormat="dd/MM/yyyy"
                  placeholderText="Ch·ªçn ng√†y sinh"
                  className="booking-datepicker-input"
                  maxDate={new Date()}
                  showMonthDropdown
                  showYearDropdown
                  dropdownMode="select"
                  customInput={
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <input
                        type="text"
                        value={
                          form.dob
                            ? form.dob.split("-").reverse().join("/")
                            : ""
                        }
                        readOnly
                        placeholder="Ch·ªçn ng√†y sinh"
                        style={{ width: "100%", paddingRight: 32 }}
                        className="booking-datepicker-input"
                      />
                      <span
                        style={{
                          position: "absolute",
                          right: 8,
                          cursor: "pointer",
                          fontSize: 20,
                        }}
                        onClick={(e) => {
                          e.target.previousSibling &&
                            e.target.previousSibling.focus &&
                            e.target.previousSibling.focus();
                        }}
                        title="Ch·ªçn ng√†y sinh"
                        role="button"
                        tabIndex={0}
                      >
                        üìÖ
                      </span>
                    </div>
                  }
                />
              </div>
            </label>
            <label>
              S·ªë ƒëi·ªán tho·∫°i
              <input
                type="text"
                name="phone"
                value={form.phone}
                onChange={handleChange}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                required
              />
            </label>
            <label>
              Email
              <input
                type="email"
                name="email"
                value={form.email}
                onChange={handleChange}
                placeholder="Nh·∫≠p email"
              />
            </label>
            <label>
              Gi·ªõi t√≠nh
              <select
                name="gender"
                value={form.gender}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
                <option value="Kh√°c">Kh√°c</option>
              </select>
            </label>
            <label>
              M·ª•c ƒë√≠ch x√©t nghi·ªám
              <input
                type="text"
                name="testPurpose"
                value={form.testPurpose}
                onChange={handleChange}
                placeholder="Nh·∫≠p m·ª•c ƒë√≠ch"
                required
              />
            </label>
            <label>
              Lo·∫°i d·ªãch v·ª•
              <select
                name="serviceType"
                value={form.serviceType}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn lo·∫°i d·ªãch v·ª•</option>
                <option value="T∆∞ v·∫•n di truy·ªÅn">T∆∞ v·∫•n di truy·ªÅn</option>
                <option value="L·∫•y m·∫´u t·∫°i nh√†">L·∫•y m·∫´u t·∫°i nh√†</option>
                <option value="L·∫•y m·∫´u t·∫°i c∆° s·ªü">L·∫•y m·∫´u t·∫°i c∆° s·ªü</option>
                <option value="Giao k·∫øt qu·∫£ t·∫≠n n∆°i">
                  Giao k·∫øt qu·∫£ t·∫≠n n∆°i
                </option>
                <option value="D·ªãch v·ª• nhanh">D·ªãch v·ª• nhanh</option>
                <option value="D·ªãch v·ª• ti√™u chu·∫©n">D·ªãch v·ª• ti√™u chu·∫©n</option>
              </select>
            </label>
            <label>
              Ng√†y & gi·ªù h·∫πn (ISO 8601)
              <input
                type="datetime-local"
                name="appointmentDate"
                value={form.appointmentDate}
                onChange={handleChange}
                required
              />
            </label>
            <label>
              Gi·ªù l·∫•y m·∫´u (collectionTime)
              <input
                type="time"
                name="collectionTime"
                value={form.collectionTime}
                onChange={handleChange}
                required
              />
            </label>
            <label>
              File v√¢n tay
              <input
                type="file"
                name="fingerprintFile"
                accept="image/*,.pdf"
                onChange={handleFileChange}
              />
            </label>
            <label>
              T·ªânh/Th√†nh ph·ªë
              <select
                name="province"
                value={form.province}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>
                {provinces.map((p) => (
                  <option key={p.name} value={p.name}>
                    {p.name}
                  </option>
                ))}
              </select>
            </label>
            <label>
              Qu·∫≠n/Huy·ªán
              <select
                name="district"
                value={form.district}
                onChange={handleChange}
                required
                disabled={!form.province}
              >
                <option value="">Ch·ªçn Qu·∫≠n/Huy·ªán</option>
                {districts.map((d) => (
                  <option key={d} value={d}>
                    {d}
                  </option>
                ))}
              </select>
            </label>
            <label>
              Lo·∫°i x√©t nghi·ªám
              <select
                name="testCategory"
                value={form.testCategory}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn lo·∫°i x√©t nghi·ªám</option>
                <option value="X√©t nghi·ªám huy·∫øt th·ªëng cha con">
                  X√©t nghi·ªám huy·∫øt th·ªëng cha con
                </option>
                <option value="X√©t nghi·ªám huy·∫øt th·ªëng m·∫π con">
                  X√©t nghi·ªám huy·∫øt th·ªëng m·∫π con
                </option>
                <option value="X√©t nghi·ªám ADN h√†nh ch√≠nh">
                  X√©t nghi·ªám ADN h√†nh ch√≠nh
                </option>
                <option value="X√©t nghi·ªám ADN c√° nh√¢n">
                  X√©t nghi·ªám ADN c√° nh√¢n
                </option>
                <option value="X√©t nghi·ªám ADN ph√°p l√Ω">
                  X√©t nghi·ªám ADN ph√°p l√Ω
                </option>
                <option value="X√©t nghi·ªám ADN tr∆∞·ªõc sinh">
                  X√©t nghi·ªám ADN tr∆∞·ªõc sinh
                </option>
                <option value="X√©t nghi·ªám ADN kh√°c">X√©t nghi·ªám ADN kh√°c</option>
              </select>
            </label>
          </div>
        </div>
        <div className="booking-submit">
          <button type="submit" disabled={isLoading}>
            {isLoading ? "ƒêang g·ª≠i..." : "ƒê·∫∑t l·ªãch h·∫πn"}
          </button>
        </div>
      </form>
    </div>
  );
}

export default Booking;
